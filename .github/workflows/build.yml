---
name: deb package build

env:
  SCCACHE_GHA_ENABLED: "true"

on:
  workflow_dispatch:
  push:
  # disable for now
  #schedule:
  #- cron: '56 0 * * *' # daily

jobs:
  build:
    name: build new packages
    #if: ${{ ! contains(needs.image_tags.outputs.packages, needs.info.outputs.upstream_version) }}
    strategy:
      matrix:
        #postgres: [14,15]
        postgres: ["15", "16"]
        box:
          - { runner: ubuntu-latest, arch: amd64 }
          #- { runner: arm-runner, arch: arm64 }

    runs-on: ${{ matrix.box.runner }}
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - uses: metalbear-co/sccache-action@v1.1.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - uses: Swatinem/rust-cache@v2

    - name: install apt packages
      run: |
        set -x

        echo "deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list > /dev/null
        wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &>/dev/null

        sudo apt-get update
        sudo apt-get install -y --no-install-recommends git build-essential libpq-dev curl libreadline6-dev zlib1g-dev pkg-config cmake libreadline-dev zlib1g-dev flex bison libxml2-dev libxslt-dev libssl-dev libxml2-utils xsltproc ccache clang libclang-dev gcc tree liblz4-dev libcurl4-openssl-dev libzstd-dev

        sudo apt install -y postgresql-${{ matrix.postgres }} postgresql-server-dev-${{ matrix.postgres }}

        sudo chmod a+rwx $(/usr/lib/postgresql/${{ matrix.postgres }}/bin/pg_config --pkglibdir) $(/usr/lib/postgresql/${{ matrix.postgres }}/bin/pg_config --sharedir)/extension /var/run/postgresql/

    - name: install pgrx
      run: |
        pgrx_version="$(cargo tree |grep  ' pgrx ' |head -n 1 | cut -f2 -dv )"
        cargo install cargo-pgrx --version "$pgrx_version" --locked
        cargo pgrx init --pg${{ matrix.postgres }}=/usr/lib/postgresql/${{ matrix.postgres }}/bin/pg_config

    # - name: run tests
    #   run: |
    #       cargo pgrx test -vv --no-default-features --features pg${{ matrix.postgres}}

    - name: build release artifacts
      run: |
        set -x
        cargo pgrx package --no-default-features --features pg${{ matrix.postgres }}

    - name: create debian package
      run: |
        set -x
        package_name="pg-row-hashes"
        extension_name="$(grep '^name ' Cargo.toml | cut -f2 -d'"')"
        extension_version="$(grep '^version ' Cargo.toml | cut -f2 -d'"')"

        extension_dir=target/release/${extension_name}-pg${{ matrix.postgres }}/usr/share/postgresql/${{ matrix.postgres }}/extension
        # strip the leading v
        deb_version=${extension_version/v/}
        sql_schema_file="$extension_dir/$extension_name--$deb_version.sql"

        sed -i 's/CREATE AGGREGATE/CREATE OR REPLACE AGGREGATE/' "$sql_schema_file"

        # copy schema file to version update sql files
         cp "$sql_schema_file" "${extension_dir}/${extension_name}--0.0.0--${deb_version}.sql"
         cp "$sql_schema_file" "${extension_dir}/${extension_name}--0.1.0--${deb_version}.sql"
         cp "$sql_schema_file" "${extension_dir}/${extension_name}--0.1.1--${deb_version}.sql"
         cp "$sql_schema_file" "${extension_dir}/${extension_name}--0.1.2--${deb_version}.sql"

        # copy local sql files
        if [ "$(find sql -mindepth 1 -maxdepth 1 -name \*.sql)" ]; then
          cp sql/*.sql ${extension_dir}
        fi

        # Create installable package
        mkdir archive
        cp $(find target/release -type f -name "${extension_name}*") archive
 
        # name of the package directory before packaging
        package_dir="${extension_name}-$extension_version-pg${{ matrix.postgres }}-${{ matrix.box.arch }}-linux-gnu"

        # Copy files into directory structure
        mkdir -p ${package_dir}/usr/lib/postgresql/lib
        mkdir -p ${package_dir}/var/lib/postgresql/extension
        cp archive/*.so ${package_dir}/usr/lib/postgresql/lib
        cp archive/*.control ${package_dir}/var/lib/postgresql/extension
        cp archive/*.sql ${package_dir}/var/lib/postgresql/extension

        # symlinks to Copy files into directory structure
        mkdir -p ${package_dir}/usr/lib/postgresql/${{ matrix.postgres }}/lib
        cd ${package_dir}/usr/lib/postgresql/${{ matrix.postgres }}/lib
        cp -s ../../lib/*.so .
        cd ../../../../../..

        mkdir -p ${package_dir}/usr/share/postgresql/${{ matrix.postgres }}/extension
        cd ${package_dir}/usr/share/postgresql/${{ matrix.postgres }}/extension
        cp -s ../../../../../var/lib/postgresql/extension/${extension_name}.control .
        cp -s ../../../../../var/lib/postgresql/extension/${extension_name}*.sql .
        cd ../../../../../.. 

        mkdir -p ${package_dir}/DEBIAN
        touch ${package_dir}/DEBIAN/control
        echo "Package: ${package_name}-pg${{ matrix.postgres}}" >> ${package_dir}/DEBIAN/control
        echo "Version: ${deb_version}" >> ${package_dir}/DEBIAN/control
        echo 'Section: database' >> ${package_dir}/DEBIAN/control
        echo 'Priority: optional' >> ${package_dir}/DEBIAN/control
        echo 'Architecture: ${{ matrix.box.arch }}' >> ${package_dir}/DEBIAN/control
        echo 'Maintainer: Tobias Florek <tob@butter.sh>' >> ${package_dir}/DEBIAN/control
        echo 'Description: PostgreSQL extension to compute fingerprints of data' >> ${package_dir}/DEBIAN/control

        # Create deb package
        sudo chown -R root:root ${package_dir}
        sudo chmod -R 00755 ${package_dir}
        dpkg-deb --build --root-owner-group ${package_dir} ${package_name}-pg${{ matrix.postgres }}.deb

        mkdir -p deb-uploads
        find . -name *.deb -exec cp {} ./deb-uploads \;
        echo "found debs:"
        ls ./deb-uploads -la

    - name: update apt repository
      uses: ibotty/apt-repo-update-action@v2
      with:
        debug: true
        github_token: ${{ secrets.APT_REPO_TOKEN }}
        git_repository: ibotty/postgresql-related-packages
        repo_supported_arch: |
          amd64
        repo_supported_distro: |
          jammy
        private_key: ${{ secrets.APT_KEY }}
        update_directory: ../deb-uploads
