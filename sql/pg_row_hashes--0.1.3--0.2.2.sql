/* 
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/

-- src/xor_agg.rs:22
-- pg_row_hashes::xor_agg::xor_agg_uuid_state_state
CREATE OR REPLACE FUNCTION "xor_agg_uuid_state_state"(
	"this" uuid, /* pgrx::datum::uuid::Uuid */
	"arg_one" uuid /* pgrx::datum::uuid::Uuid */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'xor_agg_uuid_state_state_wrapper';

-- src/xor_agg.rs:22
-- pg_row_hashes::xor_agg::xor_agg_uuid_state_finalize
CREATE OR REPLACE FUNCTION "xor_agg_uuid_state_finalize"(
	"this" uuid /* pgrx::datum::uuid::Uuid */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'xor_agg_uuid_state_finalize_wrapper';

-- src/xor_agg.rs:22
-- pg_row_hashes::xor_agg::xor_agg_uuid_state_combine
CREATE OR REPLACE FUNCTION "xor_agg_uuid_state_combine"(
	"this" uuid, /* pgrx::datum::uuid::Uuid */
	"v" uuid /* pgrx::datum::uuid::Uuid */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'xor_agg_uuid_state_combine_wrapper';

-- src/xor_agg.rs:22
-- pg_row_hashes::xor_agg::XorAggUuidState
CREATE AGGREGATE bit_xor (
	uuid /* pgrx::datum::uuid::Uuid */
)
(
	SFUNC = "xor_agg_uuid_state_state", /* pg_row_hashes::xor_agg::XorAggUuidState::state */
	STYPE = uuid, /* pgrx::datum::uuid::Uuid */
	FINALFUNC = "xor_agg_uuid_state_finalize", /* pg_row_hashes::xor_agg::XorAggUuidState::final */
	COMBINEFUNC = "xor_agg_uuid_state_combine", /* pg_row_hashes::xor_agg::XorAggUuidState::combine */
	PARALLEL = SAFE /* pg_row_hashes::xor_agg::XorAggUuidState::PARALLEL */
);

-- src/lib.rs:16
-- pg_row_hashes::id_underscore_md5
CREATE OR REPLACE FUNCTION "id_underscore_md5"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'id_underscore_md5_wrapper';

-- src/lib.rs:30
-- pg_row_hashes::id_seahash
CREATE OR REPLACE FUNCTION "id_seahash"(
	"bytes" bytea /* alloc::vec::Vec<u8> */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'id_seahash_bytea_wrapper';

-- src/lib.rs:43
-- pg_row_hashes::id_seahash
CREATE OR REPLACE FUNCTION "id_seahash"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'id_seahash_wrapper';

-- src/lib.rs:24
-- pg_row_hashes::id_farmhash
CREATE OR REPLACE FUNCTION "id_farmhash"(
	"bytes" bytea /* alloc::vec::Vec<u8> */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'id_farmhash_bytea_wrapper';

-- src/lib.rs:37
-- pg_row_hashes::id_farmhash
CREATE OR REPLACE FUNCTION "id_farmhash"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'id_farmhash_wrapper';

-- src/lib.rs:73
-- pg_row_hashes::checksum_seahash_extendable
CREATE OR REPLACE FUNCTION "checksum_seahash_extendable"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'checksum_seahash_extendable_wrapper';

-- src/lib.rs:65
-- pg_row_hashes::checksum_seahash
CREATE OR REPLACE FUNCTION "checksum_seahash"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'checksum_seahash_wrapper';

-- src/lib.rs:57
-- pg_row_hashes::checksum_farmhash_extendable
CREATE OR REPLACE FUNCTION "checksum_farmhash_extendable"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'checksum_farmhash_extendable_wrapper';

-- src/lib.rs:49
-- pg_row_hashes::checksum_farmhash
CREATE OR REPLACE FUNCTION "checksum_farmhash"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'checksum_farmhash_wrapper';

--DROP FUNCTION IF EXISTS farmhash_state_finalize(this farmhashstate);
--DROP FUNCTION IF EXISTS farmhash_state_finalize(this farmhashstate_old);
--DROP FUNCTION IF EXISTS farmhash_state_state(this farmhashstate, text);
--DROP FUNCTION IF EXISTS farmhash_state_state(this farmhashstate_old, text);
--DROP FUNCTION IF EXISTS farmhashstate_in(cstring);
--DROP FUNCTION IF EXISTS farmhashstate_in_old(cstring);
--DROP FUNCTION IF EXISTS farmhashstate_out(farmhashstate);
--DROP FUNCTION IF EXISTS farmhashstate_out(farmhashstate_old);
--
--DROP FUNCTION IF EXISTS seahash_state_finalize(this seahashstate);
--DROP FUNCTION IF EXISTS seahash_state_finalize(this seahashstate_old);
--DROP FUNCTION IF EXISTS seahash_state_state(this seahashstate, text);
--DROP FUNCTION IF EXISTS seahash_state_state(this seahashstate_old, text);
--DROP FUNCTION IF EXISTS seahashstate_in(cstring);
--DROP FUNCTION IF EXISTS seahashstate_in_old(cstring);
--DROP FUNCTION IF EXISTS seahashstate_out(seahashstate);
--DROP FUNCTION IF EXISTS seahashstate_out(seahashstate_old);

DROP AGGREGATE IF EXISTS farmhash_agg(text);
DROP AGGREGATE IF EXISTS seahash_agg(text);
DROP AGGREGATE IF EXISTS farmhash_agg_old(text);
DROP AGGREGATE IF EXISTS seahash_agg_old(text);

DROP TYPE IF EXISTS seahashstate;
DROP TYPE IF EXISTS seahashstate_old;
DROP TYPE IF EXISTS farmhashstate;
DROP TYPE IF EXISTS farmhashstate_old;
