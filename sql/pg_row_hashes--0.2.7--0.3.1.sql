/* <begin connected objects> */
/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/
/* </end connected objects> */

/* <begin connected objects> */
-- src/xor_agg.rs:4
-- pg_row_hashes::xor_agg::XorAggUuidState
CREATE TYPE XorAggUuidState;

-- src/xor_agg.rs:4
-- pg_row_hashes::xor_agg::xoragguuidstate_in
CREATE  FUNCTION "xoragguuidstate_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS XorAggUuidState /* core::option::Option<pg_row_hashes::xor_agg::XorAggUuidState> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'xoragguuidstate_in_wrapper';

-- src/xor_agg.rs:4
-- pg_row_hashes::xor_agg::xoragguuidstate_out
CREATE  FUNCTION "xoragguuidstate_out"(
	"input" XorAggUuidState /* pg_row_hashes::xor_agg::XorAggUuidState */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'xoragguuidstate_out_wrapper';

-- src/xor_agg.rs:4
-- pg_row_hashes::xor_agg::xoragguuidstate_recv
CREATE  FUNCTION "xoragguuidstate_recv"(
	"internal" internal /* pgrx::datum::internal::Internal */
) RETURNS XorAggUuidState /* pg_row_hashes::xor_agg::XorAggUuidState */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'xoragguuidstate_recv_wrapper';

-- src/xor_agg.rs:4
-- pg_row_hashes::xor_agg::xoragguuidstate_send
CREATE  FUNCTION "xoragguuidstate_send"(
	"input" XorAggUuidState /* pg_row_hashes::xor_agg::XorAggUuidState */
) RETURNS bytea /* alloc::vec::Vec<u8> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'xoragguuidstate_send_wrapper';


-- src/xor_agg.rs:4
-- pg_row_hashes::xor_agg::XorAggUuidState
CREATE TYPE XorAggUuidState (
	INTERNALLENGTH = variable,
	INPUT = xoragguuidstate_in, /* pg_row_hashes::xor_agg::xoragguuidstate_in */
	OUTPUT = xoragguuidstate_out, /* pg_row_hashes::xor_agg::xoragguuidstate_out */
	RECEIVE = xoragguuidstate_recv, /* pg_row_hashes::xor_agg::xoragguuidstate_recv */
	SEND = xoragguuidstate_send, /* pg_row_hashes::xor_agg::xoragguuidstate_send */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- src/array_functions.rs:55
-- pg_row_hashes::array_functions::array_union
CREATE OR REPLACE FUNCTION "array_union"(
	"a" INT[], /* core::option::Option<alloc::vec::Vec<core::option::Option<i32>>> */
	"b" INT[] /* core::option::Option<alloc::vec::Vec<core::option::Option<i32>>> */
) RETURNS INT[] /* alloc::vec::Vec<i32> */
IMMUTABLE PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'array_union_i32_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/array_functions.rs:47
-- pg_row_hashes::array_functions::array_union
CREATE OR REPLACE FUNCTION "array_union"(
	"a" bigint[], /* core::option::Option<alloc::vec::Vec<core::option::Option<i64>>> */
	"b" bigint[] /* core::option::Option<alloc::vec::Vec<core::option::Option<i64>>> */
) RETURNS bigint[] /* alloc::vec::Vec<i64> */
IMMUTABLE PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'array_union_i64_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/array_functions.rs:63
-- pg_row_hashes::array_functions::array_union
CREATE OR REPLACE FUNCTION "array_union"(
	"a" uuid[], /* core::option::Option<alloc::vec::Vec<core::option::Option<pgrx::datum::uuid::Uuid>>> */
	"b" uuid[] /* core::option::Option<alloc::vec::Vec<core::option::Option<pgrx::datum::uuid::Uuid>>> */
) RETURNS uuid[] /* alloc::vec::Vec<pgrx::datum::uuid::Uuid> */
IMMUTABLE PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'array_union_sorted_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/array_functions.rs:39
-- pg_row_hashes::array_functions::array_union
CREATE OR REPLACE FUNCTION "array_union"(
	"a" TEXT[], /* core::option::Option<alloc::vec::Vec<core::option::Option<alloc::string::String>>> */
	"b" TEXT[] /* core::option::Option<alloc::vec::Vec<core::option::Option<alloc::string::String>>> */
) RETURNS TEXT[] /* alloc::vec::Vec<alloc::string::String> */
IMMUTABLE PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'array_union_text_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/array_functions.rs:31
-- pg_row_hashes::array_functions::array_union
CREATE OR REPLACE FUNCTION "array_union"(
	"a" uuid[], /* core::option::Option<alloc::vec::Vec<core::option::Option<pgrx::datum::uuid::Uuid>>> */
	"b" uuid[] /* core::option::Option<alloc::vec::Vec<core::option::Option<pgrx::datum::uuid::Uuid>>> */
) RETURNS uuid[] /* alloc::vec::Vec<pgrx::datum::uuid::Uuid> */
IMMUTABLE PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'array_union_uuid_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:59
-- pg_row_hashes::checksum_farmhash
CREATE OR REPLACE FUNCTION "checksum_farmhash"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'checksum_farmhash_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:67
-- pg_row_hashes::checksum_farmhash_extendable
CREATE OR REPLACE FUNCTION "checksum_farmhash_extendable"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'checksum_farmhash_extendable_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:75
-- pg_row_hashes::checksum_seahash
CREATE OR REPLACE FUNCTION "checksum_seahash"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'checksum_seahash_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:83
-- pg_row_hashes::checksum_seahash_extendable
CREATE OR REPLACE FUNCTION "checksum_seahash_extendable"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'checksum_seahash_extendable_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:47
-- pg_row_hashes::id_farmhash
CREATE OR REPLACE FUNCTION "id_farmhash"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'id_farmhash_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:23
-- pg_row_hashes::id_farmhash
CREATE OR REPLACE FUNCTION "id_farmhash"(
	"bytes" bytea /* alloc::vec::Vec<u8> */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'id_farmhash_bytea_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:53
-- pg_row_hashes::id_seahash
CREATE OR REPLACE FUNCTION "id_seahash"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'id_seahash_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:35
-- pg_row_hashes::id_seahash
CREATE OR REPLACE FUNCTION "id_seahash"(
	"bytes" bytea /* alloc::vec::Vec<u8> */
) RETURNS bigint /* i64 */
IMMUTABLE STRICT PARALLEL SAFE 
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'id_seahash_bytea_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/lib.rs:15
-- pg_row_hashes::id_underscore_md5
CREATE OR REPLACE FUNCTION "id_underscore_md5"(
	"a" VARIADIC TEXT[] /* pgrx::datum::array::VariadicArray<alloc::string::String> */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'id_underscore_md5_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/xor_agg.rs:25
-- pg_row_hashes::xor_agg::xor_agg_uuid_state_xor_agg_uuid_state_combine
CREATE OR REPLACE FUNCTION "xor_agg_uuid_state_xor_agg_uuid_state_combine"(
	"this" uuid, /* pgrx::datum::uuid::Uuid */
	"v" uuid /* pgrx::datum::uuid::Uuid */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'xor_agg_uuid_state_xor_agg_uuid_state_combine_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/xor_agg.rs:25
-- pg_row_hashes::xor_agg::xor_agg_uuid_state_xor_agg_uuid_state_finalize
CREATE OR REPLACE FUNCTION "xor_agg_uuid_state_xor_agg_uuid_state_finalize"(
	"this" uuid /* pgrx::datum::uuid::Uuid */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'xor_agg_uuid_state_xor_agg_uuid_state_finalize_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/xor_agg.rs:25
-- pg_row_hashes::xor_agg::xor_agg_uuid_state_xor_agg_uuid_state_state
CREATE OR REPLACE FUNCTION "xor_agg_uuid_state_xor_agg_uuid_state_state"(
	"this" uuid, /* pgrx::datum::uuid::Uuid */
	"arg_one" uuid /* pgrx::datum::uuid::Uuid */
) RETURNS uuid /* pgrx::datum::uuid::Uuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'xor_agg_uuid_state_xor_agg_uuid_state_state_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- src/xor_agg.rs:25
-- pg_row_hashes::xor_agg::XorAggUuidState
CREATE OR REPLACE AGGREGATE bit_xor (
	uuid /* pgrx::datum::uuid::Uuid */
)
(
	SFUNC = "xor_agg_uuid_state_xor_agg_uuid_state_state", /* pg_row_hashes::xor_agg::XorAggUuidState::state */
	STYPE = uuid, /* pgrx::datum::uuid::Uuid */
	FINALFUNC = "xor_agg_uuid_state_xor_agg_uuid_state_finalize", /* pg_row_hashes::xor_agg::XorAggUuidState::final */
	COMBINEFUNC = "xor_agg_uuid_state_xor_agg_uuid_state_combine", /* pg_row_hashes::xor_agg::XorAggUuidState::combine */
	PARALLEL = SAFE /* pg_row_hashes::xor_agg::XorAggUuidState::PARALLEL */
);
/* </end connected objects> */

